= MTBL_READER(3) =

== NAME ==

mtbl_reader - read an MTBL file

== SYNOPSIS ==

^#include <mtbl.h>^

Reader objects:

[verse]
^struct mtbl_reader *
mtbl_reader_init(const char *'fname', const struct mtbl_reader_options *'ropt');^

[verse]
^struct mtbl_reader *
mtbl_reader_init_fd(int 'fd', const struct mtbl_reader_options *'ropt');^

[verse]
^void
mtbl_reader_destroy(struct mtbl_reader **'r');^

[verse]
^const struct mtbl_source *
mtbl_reader_source(struct mtbl_reader *'r');^

Reader options:

[verse]
^struct mtbl_reader_options *
mtbl_reader_options_init(void);^

[verse]
^void
mtbl_reader_options_destroy(struct mtbl_reader_options **'ropt');^

[verse]
^void
mtbl_reader_options_set_verify_checksums(
        struct mtbl_reader_options *'ropt',
        bool 'verify_checksums');^

[verse]
^void
mtbl_reader_options_set_madvise_random(
        struct mtbl_reader_options *'ropt',
        bool 'madvise_random');^

Reader file metadata:

[verse]
^uint64_t
mtbl_reader_get_index_block_offset(struct mtbl_reader *'r');^

[verse]
^uint64_t
mtbl_reader_get_data_block_size(struct mtbl_reader *'r');^

[verse]
^mtbl_compression_type
mtbl_reader_get_compression_algorithm(struct mtbl_reader *'r');^

[verse]
^uint64_t
mtbl_reader_get_count_entries(struct mtbl_reader *'r');^

[verse]
^uint64_t
mtbl_reader_get_count_data_blocks(struct mtbl_reader *'r');^

[verse]
^uint64_t
mtbl_reader_get_bytes_data_blocks(struct mtbl_reader *'r');^

[verse]
^uint64_t
mtbl_reader_get_bytes_index_block(struct mtbl_reader *'r');^

[verse]
^uint64_t
mtbl_reader_get_bytes_keys(struct mtbl_reader *'r');^

[verse]
^uint64_t
mtbl_reader_get_bytes_values(struct mtbl_reader *'r');^

== DESCRIPTION ==

MTBL files are accessed by creating an ^mtbl_reader^ object, calling
^mtbl_reader_source^() to obtain an ^mtbl_source^ handle, and using the
^mtbl_source^(3) interface to read entries.

^mtbl_reader^ objects may be created by calling ^mtbl_reader_init^() with an
_fname_ argument specifying the filename to be opened, or
^mtbl_reader_init_fd^() may be called with an _fd_ argument specifying an open,
readable file descriptor. Since MTBL files are immutable, the same MTBL file
may be opened and read from concurrently by independent threads or processes.

If the _ropt_ parameter to ^mtbl_reader_init^() or ^mtbl_reader_init_fd^() is
non-NULL, the parameters specified in the ^mtbl_reader_options^ object will be
configured into the ^mtbl_reader^ object.

=== Reader options ===

==== verify_checksums ====

Specifies whether or not the CRC32C checksum on each data block should be
verified or not. If _verify_checksums_ is enabled, a checksum mismatch will
cause a runtime error. Note that the checksum on the index block is always
verified, since the overhead of doing this once when the reader object is
instantiated is minimal. The default is to not verify data block checksums.

==== madvise_random ====

Specifies whether the kernel should be advised if the data access patterns are
expected to be random or not. This may hurt some workloads but help others.
The default is to not set this advisory information.

This option can be explicitly overridden by setting the environment variable
^MTBL_READER_MADVISE_RANDOM^ to the string ^"0"^ (force disable) or ^"1"^
(force enable).

This option only has any effect on systems that have the ^posix_madvise^ or
^madvise^ system calls.

=== File metadata ===

The functions prefixed with ^mtbl_reader_get^ expose metadata about the
entire MTBL file:

==== mtbl_reader_get_index_block_offset() ====

Byte offset in the MTBL file where the index begins.

==== mtbl_reader_get_data_block_size() ====

Size of an uncompressed data block, see ^mtrbl_writer^(3).
==== mtbl_reader_get_compression_algorithm() ====

One of the ^compression^ values allowed by ^mtrbl_writer^(3).

==== mtbl_reader_get_count_entries() ====

How many key-value pairs are in the file.

==== mtbl_reader_get_count_data_blocks() ====

The number of data blocks.

==== mtbl_reader_get_bytes_data_blocks() ====

Number of bytes in used for key-value data (as opposed to the index).

==== mtbl_reader_get_bytes_index_block() ====

Number of bytes used for the index.

==== mtbl_reader_get_bytes_keys() ====

How many bytes are needed to store the concatenation of all the original,
uncompressed keys.

==== mtbl_reader_get_bytes_values() ====

How many bytes are needed to store the concatenation of all the 
original, uncompressed values.

== RETURN VALUE ==

^mtbl_reader_init^() and ^mtbl_reader_init_fd^() return NULL on failure, and
non-NULL on success.
